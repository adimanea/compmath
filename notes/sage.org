#+TITLE: SageMath Notes
#+AUTHOR: Adrian
#+STARTUP: latexpreview

This document contains notes that help me learn to use Sage in my workflow.
As such, it will be centered on my tools and approach and a more 
"general audience" will follow.

My setup is:
- OS: Manjaro i3;
- Computing Environment: Emacs 26.3;
  + packages: [[https://github.com/jorgenschaefer/elpy][elpy]], [[https://github.com/sagemath/sage-shell-mode][sage-shell-mode]], [[https://github.com/sagemath/ob-sagemath][ob-sagemath]];
- Web browser: Firefox 77.

Main resource: /Computational Mathematics with SageMath/ by Zimmermann,
Casamayou et al., freely available [[http://dl.lateralis.org/public/sagebook/sagebook-ba6596d.pdf][here]].

* Installation and First Run
We need to install both Sage as a program and its Jupyter kernel if we are
to use it as such. I will not be using virtual environments, but that is
possible. So:
#+BEGIN_SRC sh
  $ sudo pacman -S sagemath sagemath-jupyter
#+END_SRC

Beforehand or afterwards, one may look at the related packages with:
#+BEGIN_SRC sh
  $ pacman -Ss sagemath
#+END_SRC

Perhaps relevant could be:
- =sagetex=, which will allow one to integrate Sage computations into
  (La)TeX documents;
- =sagemath-doc=, which contain a local HTML copy of the documentation.

After installation, it could be run either in the terminal by simply typing
=sage=:
#+BEGIN_SRC sh
  $ sage
#+END_SRC
which will start with:
#+BEGIN_SRC sh
	┌────────────────────────────────────────────────────────────────────┐
	│ SageMath version 9.1, Release Date: 2020-05-20                     │
	│ Using Python 3.8.3. Type "help()" for help.                        │
	└────────────────────────────────────────────────────────────────────┘
	sage:  
#+END_SRC
or if you choose to run it inside a Jupyter notebook, =cd= to the directory
where the server will be started and where you choose to store the notebooks.
Then enter:
#+BEGIN_SRC sh
  $ sage -n jupyter
#+END_SRC
This will start the server and one can choose to create a new notebook, with
the appropriate Sage kernel.

If only the Python kernel is available, make sure you have installed also the
=sagemath-jupyter= package as well.

Interactive computations can be performed, in plain text mode in the terminal,
by pressing =Enter= after each step or inside Jupyter notebook cells, which
are evaluated by pressing =Shift + Enter= after each command.

Should a command require GUI capabilities that the terminal is not capable of,
such as plots, the terminal interface will open the result in the default
web browser.

For example:
#+BEGIN_SRC sage
  sage: u(n) = n^100 / 100^n
  sage: plot(u(x), x, 1 40)
#+END_SRC
will show the plot in the notebook if run inside Jupyter or in a web browser,
if run from the terminal.

The Jupyter server can be killed with =C-c C-c=, but /make sure to save the/
/notebook beforehand/. Otherwise, subsequent operations on the notebook will
be available once the server is restarted.

By entering =%display latex= in any Jupyter cell, all subsequent outputs
will be formatted using MathJax.

The shell is closed with =exit()=.

** Loading and Attaching Source Files
If so preferred, instructions can be saved in a =.sage= file and loaded
in the REPL. This can be done in two ways:
#+BEGIN_SRC sage
  # loading a file
  sage: load("example.sage")

  # attaching a file
  sage: attach("example.sage")
#+END_SRC

*Loading* will just execute the file as it is, whereas *attaching* will
refresh the outputs if the attached file changes (i.e. it will be attached
as "living" to the current REPL).

-------

What will follow is an overview of the Sage syntax and examples that will later
be put together in a more focused way in order to be used in my classes.

* Numerical Computation
Simple computations can be inserted readily, using the Python syntax:
#+BEGIN_SRC sage
  sage: 2^3
  8
  sage: 3**3
  27
  sage: 20/14
  10/7
  sage: 20.0 / 14
  1.42857142457143
  sage: numerical_approx(20/14)
  1.42857142457143
  sage: numerical_approx(20/14, digits=3)
  1.429
  sage: 20 // 6		# quotient
  3
  sage: 20 % 6		# remainder
  2
  sage: arctan(1)
  1/4*pi
  sage: exp(2 * I * pi)
  1
#+END_SRC

Help and examples for each function can be called by adding =?= after the
function name, e.g. =sin?=.

* More Syntax and Symbolic Variables
To save a computation, it must be assigned to a variable:
#+BEGIN_SRC sage
  sage: y = 1 + 2
  sage: y
  3
#+END_SRC

Chaining instructions is done with =;=:
#+BEGIN_SRC sage
  sage: y = 3 ; x = y + 2 ; x
  5
#+END_SRC

The previous results are saved in the special variables =_, __, ___=.

In case one redefines some predefined variables or functions, such as
=pi=, they can be restored with =restore()=. The function =reset()= does
even more, by clearing all the user-defined variables as well.

*Symbolic variables* can be declared using the class =SR= (from Symbolic Ring),
with the method =SR.var()=, which is also available in shorthand with =var()=.
Only =x= is reserved and predefined as symbolic variable, any others should
be declared explicitly.
#+BEGIN_SRC sage
  sage: z = SR.var('z')
  sage: 2*z + 3
  2*z + 3
  sage: y = var('z')
  sage: 2*y + 3
  2*z + 3
#+END_SRC

There is also a shortcut for defining a *sequence of symbolic variables*:
#+BEGIN_SRC sage
  sage: x = var('x', 100)			# declares x0, x1, ..., x99
  sage: (x[0] + x[1])*x[99]
  (x0 + x1)*x99
#+END_SRC

/In Jupyter notebooks only/, it is possible to use =automatic_names(True)=,
which creates a symbolic variable automatically whenever a new name is used.

* Analysis and Algebra
** Expansions, Substitutions and Simplification
In symbolic computations, one can make explicit substitutions
with the =subs()= method for variables or the =substitute()=
method for functions. Note the double equal sign for the latter:
#+BEGIN_SRC sage
  sage: a, x = var('a, x'); y = cos(x + a) * (x + 1); y
  (x + 1)*cos(a + x)
  sage: y.subs(a = -x); y.subs(x = pi/2, a=pi/3); y.subs(x = 0.5, a=2.3)
  x + 1
  -1/4*sqrt(3)*(pi + 2)
  -1.41333351100299
  sage: y, z = var('y, z'); f = x^3 + y^2 + z
  sage: f.substitute(x^3 == y^2, z == 1)
  2*y^2 + 1
#+END_SRC

Functions can be expanded with the =expand()= method and symbolic expressions
can be turned into functions with the =function()= method:
#+BEGIN_SRC sage
  sage: f(x) = (2*x + 1)^3; f(-3)
  -125
  sage: f.expand()
  x |--> 8*x^3 + 12*x^2 + 6*x + 1

  sage: y = var('y'); u = sin(x) + x*cos(y)
  sage: v = u.function(x, y); v
  (x, y) |--> x*cos(y) + sin(x)
  sage: w(x, y) = u; w
  (x, y) |--> x*cos(y) + sin(x)
#+END_SRC

Further, expressions can be factored, grouping the terms according to the
powers of a specified variable, with the =collect()= method:
#+BEGIN_SRC sage
  sage: p = (x + y) * (x + 1)^2
  sage: p2 = p.expand(); p2
  x^3 + x^2*y + 2*x^2 + 2*x*y + x + y
  sage: p2.collect(y)
  x^3 + x^2*(y + 2) + x*(2*y + 1) + y
#+END_SRC

For rational functions, there are also the methods:
- =combine()=, which computes the fractions that have a common denominator;
- =partial_fraction()=, which decomposes in partial fractions.
#+BEGIN_SRC sage
  sage: fraction = b/a + c/a + d/n
  sage: fraction.combine()
  (b + c)/a + d/n

  sage: fraction = 1/((x^3 + 1)*y^2)
  sage: fraction.partial_fraction(x)
  (-(x-2))/(3*(x^2 - x + 1)*y^2) + 1/(3*(x + 1)*y^2)
#+END_SRC

** Assumptions
Computations can be made under certain assumptions, which if not explicitly
discarded, are kept throughout the computation:
#+BEGIN_SRC sage
  sage: assume(x > 0); bool(sqrt(x^2) == x)
  True
  sage: forget(x > 0); bool(sqrt(x^2) == x)
  False
  sage: n = var('n'); assume(n, 'integer'); sin(n*pi)
  0
#+END_SRC

** Solving Equations
| Syntax                      | What it solves/returns          |
|-----------------------------+---------------------------------|
| =solve=                     | symbolic solution for equations |
| =roots=                     | roots with multiplicities       |
| =find_root=                 | numerical solving               |
| =solve_right=, =solve_left= | linear equations                |
| =desolve=                   | differential equations          |
| =rsolve=                    | recurrence equations            |
Some of these can take more arguments. For example, try the following
(output is omitted):
#+BEGIN_SRC sage
  sage: z, phi = var('z, phi')
  sage: eq = z**2 - 2/cos(phi)*z + 5/cos(phi)**2 - 4 == 0; eq
  sage: eq.lhs()                  # extracts left hand side
  sage: solve(eq, z)              # solve for z
  sage: solve(eq, z, solution_dict=True)  # return solutions as dictionary
  sage: solve([x + y == 3, 2*x + 2*y == 6], x, y) # system of eqs
  sage: solve(x^2 + x - 1 > 0, x)         # inequality
  sage: find_root(eq, 0.1, pi)            # search in [0.1, pi]
  sage: (x^3 + 2*x + 1).roots(x)          # return roots
  sage: (x^3 + 2*x + 1).roots(x, ring=RR) # return REAL roots only
  sage: y = function('y')(x)              # y = y(x)

  # Second Order Differential Equation
  # syntax: desolve(equation, unknown_function, boundary_conds
  # in this case: y_0, x_0 and dy/dx(0)
  sage: desolve(diff(y,x,x) + x*diff(y,x) + y == 0, y, [0,0,1])
#+END_SRC

** Analysis
*** Numerical Series
#+BEGIN_SRC sage
  sage: k, n = var('k, n')
  sage: sum(k, k, 1, n).factor()
  n*(n+1)/2

  sage: n, k, y = var('n, k, y')
  sage: sum(binomial(n,k) * x^k * y^(n-k), k, 0, n)
  (x + y)^n

  sage: a, q, k, n = var('a, q, k, n')
  sage: sum(a*q^k, k, 0, n)
  (aq^(n+1) - a)/(q - 1)

  sage: assume(abs(q) < 1)
  sage: sum(a*q^k, k, 0, infinity)
  -a/(q - 1)
#+END_SRC

*** Limits
#+BEGIN_SRC sage
  sage: limit((x**(1/3) - 2) / ((x + 19)**(1/3) - 3), x = 8)
  9/4
  sage: f(x) = (cos(pi/4 - x)-tan(x))/(1 - sin(pi/4 + x))
  sage: limit(f(x), x = pi/4)
  Infinity

  # directional limits
  sage: limit(f(x), x = pi/4, dir='minus')        # from the left
  +Infinity
  sage: limit(f(x), x = pi/4, dir='plus')         # from the right
  -Infinity
#+END_SRC

*** Sequences
Start with the following problem as motivation:
#+BEGIN_EXAMPLE
Let u_n be the sequence n^100/100^n.

Compute the first 10 terms. What is the monotony of the sequence?
What is its limit? From which value of n does u_n belong to [0, 1e-8]?
#+END_EXAMPLE

For the first part, we define the sequence and output its first 10 terms:
#+BEGIN_SRC sage
  sage: u(n) = n^100 / 100^n
  sage: u(1.);u(2.);u(3.)...
  0.01000000000000000
  1.26765060022823e26
  5.15377520732011e41
#+END_SRC

Now, to get an intuition on its variance, we can easily plot it, with
the image shown in the Jupyter notebook or opened separately in the browser
if running from the terminal:
#+BEGIN_SRC sage
  sage: plot(u(x), x, 1, 40)
  Graphics object consisting of 1 graphics primitive
#+END_SRC

We can now try to see where is the maximum of the sequence, looking at
the graph. That is, we are looking for roots of its derivative:
#+BEGIN_SRC sage
  sage: v(x) = diff(u(x), x); sol = solve(v(x) == 0, x); sol
  [x == 50/log(10), x == 0]
  sage: floor(sol[0].rhs())
  21
#+END_SRC
So the sequence is increasing up to index 21 and decreasing after index 22.

Then we can compute its limit:
#+BEGIN_SRC sage
  sage: limit(u(n), n=infinity)
  0
  sage: n0 = find_root(u(n) - 1e-8 == 0, 22, 1000); n0
  105.07496210187252
#+END_SRC

It follows that from index 106, the sequence always lies in =[0, 1e-8]=.

*** Power Series Expansion
The general syntax for the power series expansion of order =n= at =x0=
for a function =f= is =f(x).series(x==x0, n)=:
#+BEGIN_SRC sage
sage: ((1+arctan(x))^(1/x)).series(x==0, 3)
(e) + (-1/2e)x + (1/8e)x^2 + Order(x^3)
#+END_SRC

One can skip the big-Oh terms with the method =truncate()=:
#+BEGIN_SRC sage
sage: ((1+arctan(x))^(1/x)).series(x==0, 3).truncate()
(e) + (-1/2e)x + (1/8e)x^2
#+END_SRC

Taylor expansions can also be used, with the added feature that one can
specify the asymptotic behaviour at infinity, i.e. what is a polynomial
function that is asymptotically similar to the function given:
#+BEGIN_SRC sage
  sage: taylor(sin(x), x, 0, 7)
  -1/5040*x^7 + 1/120*x^5 - 1/6*x^3 + x
  sage: taylor((x**3+x)**(1/3) - (x**3-x)**(1/3), x, infinity, 2)
  2/3/x
#+END_SRC

The second computation means that when =x= goes to infinity, the function
in the input behaves as =2/(3x)=.

*** Derivatives and Integrals
Derivatives are computed with =derivative= or =diff= and it is the same
syntax for functions of one or more variables:
#+BEGIN_SRC sage
  sage: diff(sin(x^2), x)
  2*x*cos(x^2)
  sage: function('f')(x); function('g')(x); diff(f(g(x)), x)
  f(x)
  g(x)
  D[0](f)(g(x))*diff(g(x), x)
  sage: diff(ln(f(x)), x)
  diff(f(x), x)/f(x)

  # partial derivative
  sage: f(x, y) = x*y + sin(x^2) + e^(-x); derivative(f, y)
  (x, y) |--> x

  # check that a function is harmonic
  sage: x, y = var('x, y'); f = ln(x**2 + y**2)/2
  sage: delta = diff(f, x, 2) + diff(f, y, 2)
  sage: delta.simplify_rational()
  0
#+END_SRC

Integrals can be computed with =integrate= or =integral=:
#+BEGIN_SRC sage
  sage: sin(x).integral(x, 0, pi/2)
  1
  sage: integrate(1/(1+x^2), x)
  arctan(x)
  sage: integrate(1/(1 + x^2), x, -infinity, infinity)
  pi

  # parametric integral
  sage: u = var('u'); f = x * cos(u) / (u^2 + x^2)
  sage: assume(x>0); f.integrate(u, 0, infinity)
  1/2*pi*e^(-x)
  sage: forget(); assume(x<0); f.integrate(u, 0, infinity)
  -1/2*pi*e^x

  # numeric integral
  sage: integral_numerical(sin(x)/x, 0, 1)
  (0.946083..., 1.05036...e-14)           # (value, error)
#+END_SRC

** Basic Linear Algebra
The basic functions on vectors and matrices are listed below. Also recall
that the =solve= function can be used for systems of (linear) equations.
| Syntax                        | What it does                   |
|-------------------------------+--------------------------------|
| =vector=                      | makes a vector                 |
| =cross_product=               | computes cross product         |
| =dot_product=                 | computes scalar product        |
| =norm=                        | norm of a vector               |
| =matrix=                      | constructs a matrix            |
| =solve_right=, =solve_left=   | solves a matrix equation       |
| =right_kernel=, =left_kernel= | kernel of a matrix             |
| =echelon_form=                | row echelon form               |
| =row_space=                   | vector space generated by rows |
| =block_matrix=                | matrix concatenation           |
| =eigenvalues=                 | matrix eigenvalues             |
| =eigenvectors_right=          | matrix eigenvectors            |
| =jordan_form=                 | Jordan normal form             |
| =minimal_polynomial=          | minimal polynomial             |
| =characteristic_polynomial=   | characteristic polynomial      |

Examples follow.
#+BEGIN_SRC sage
  sage: v = vector([1, 2, 3]); v
  (1, 2, 3)
  sage: A = matrix(QQ, [[1,2], [3,4]]); A
  #                ^^optional specification of base field
  [1 2]
  [3 4]
  sage: A = matrix(QQ, [[2,4,3],[-4,-6,-3],[3,3,1]])
  sage: A.characteristic_polynomial()
  x^3 + 3*x^2 - 4
  sage: A.eigenvalues()
  [1, -2, -2]
  sage: A.minimal_polynomial().factor()
  (x - 1) * (x + 2)^2
  sage: A.eigenvectors_right()
  [(1, [(1,-1,1)], 1), (-2,[(1,-1,0)],2)]
  sage: A.jordan_form(transformation=True)
  (
  [ 1| 0  0]            
  [--+-----]  [ 1  1  1]
  [ 0|-2  1]  [-1 -1  0]
  [ 0| 0 -2], [ 1  0 -1]
  )
#+END_SRC

*Remarks:* 
- For eigenvectors, Sage gives us a list of triples (eigenvalue, eigenvectors
  forming a basis for that eigenspace, algebraic multiplicity of the eigenspace);
- For the Jordan form, we are given the matrix that was used to obtain the form.

* Graphics
To plot a symbolic function, we use the function =plot=, with its simplest
form as =plot(f(x), a, b)=, which plots the function =f(x)=, for =x= in =[a, b]=.
Other options that can be added are:
- =plot_points= (default 200);
- =xmin= and =xmax= for the scale of the =X= axis;
- =color= as an RGB triple or a string ('blue') or a hex color (~'#aaff0b'~);
- =detect_poles= (default =False=): draws vertical asymptotes at poles;
- =alpha=: line transparency;
- =thickness=: line thickness;
- =linestyle=: dotted (':'), dash-dotted ('-.') or solid (default, '-').

For further manipulation, the graphics object can be assigned to a variable,
say =g=, and then use specific functions to =show= or =save= it, such as:
- ~g.show(ymin=-1,ymax=3)~;
- ~g.show(aspect_ratio=1)~;
- ~g.save(name, aspect_ratio=1, xmin=-1, xmax=3, ymin=-1, ymax=3)~.

The following snippet draws the sine function and its first Taylor polynomials
at 0:
#+BEGIN_SRC sage :tangle ../scratch/taylor_plot.sage :exports both :session t :results output
  def p(x, n):
	  return(taylor(sin(x), x, 0, n))
  xmax = 15; n = 15
  g = plot(sin(x), x, -xmax, xmax)
  for d in range(n):
	  g += plot(p(x, 2*d + 1), x, -xmax, xmax,
				color=(1.7*d/(2*n), 1.5*d/(2*n), 1-3*d/(4*n)))
  g.show(ymin=-2, ymax=2)
#+END_SRC

which gives [[file:../scratch/taylor.png][this]].

This can be visualised as an animation like so:
#+BEGIN_SRC sage :tangle ../scratch/taylor_animation.sage :exports both :session t :results output
  a = animate([[sin(x), taylor(sin(x), x, 0, 2*k+1)]
			   for k in range(0, 14)], xmin=-14, xmax=14,
			  ymin=-3, ymax=3, figsize=[8, 4])
  a.show(); a.save('../scratch/taylor_animation.gif')
#+END_SRC

This launches the gif in the browser and it was also saved [[file:../scratch/taylor_animation.gif][here]].

** Parametric Plots
They can be obtained with the command =parametric_plot((f(t), g(t)), (t, a, b))=.
Example:
#+BEGIN_SRC sage :tangle ../scratch/parametric_plot.sage :exports both :session t :results output
  t = var('t')
  x = cos(t) + cos(7*t)/2 + sin(17*t)/3
  y = sin(t) + sin(7*t)/2 + cos(17*t)/3
  g = parametric_plot((x, y), (t, 0, 2*pi))
  g.show(aspect_ratio=1)
#+END_SRC

which is shown [[file:../scratch/parametric.png][here]].

** Polar Plot
They are drawn with the command =polar_plot(rho(theta), (theta, a, b))=.
Example, for the curve \rho(\theta) = 1 + e * cos(n \theta):
#+BEGIN_SRC sage :tangle ../scratch/polar_plot.sage :exports both :session t :results output
  t = var('t'); n = 20/19
  g1 = polar_plot(1 + 2*cos(n*t), (t,0,n*36*pi), plot_points=5000)
  g2 = polar_plot(1 + 1/3*cos(n*t), (t, 0, n*36*pi), plot_points=5000)
  g1.show(aspect_ratio=1)
  g2.show(aspect_ratio=1)
#+END_SRC

The results are [[file:../scratch/polar1.png][here]] and [[file:../scratch/polar2.png][here]].

** Implicit Plots
Let us draw the plot C = \{ z \in \mathbb{C}, |cos(z^4)| = 1 \}. This can be
done either with =implicit_plot= or =complex_plot=.
#+BEGIN_SRC sage :tangle ../scratch/implicit_plot.sage :exports both :session t :results output
  z = var('z')
  g1 = complex_plot(abs(cos(z^4))-1,
					(-3, 3), (-3, 3), plot_points=400)
  f = lambda x, y : (abs(cos((x + I*y)**4)) - 1)
  g2 = implicit_plot(f, (-3,3), (-3, 3), plot_points=400)
  g1.show(aspect_ratio=1); g2.show(aspect_ratio=1)
#+END_SRC

They are [[file:../scratch/complex_plot.png][here]] and [[file:../scratch/implicit_plot.png][here]].

** Data Plots
For bar charts and histograms, we have the following syntax examples:
#+BEGIN_SRC sage
  bar_chart([randrange(15) for i in range(20)])
  bar_chart([x^2 for x in range(1,20)], width=0.2)

  mylist = [10 + floor(10*sin(i)) for i in range(100)]
  bar_chart(mylist)
  finance.TimeSeries(mylist).plot_histogram(bins=20)
#+END_SRC

The basic ideas are:
- bar charts and histograms are drawn from /lists/ so input must be of type list;
- the option =bins= manages the length of each interval that is plotted (default 50);
- see [[https://doc.sagemath.org/html/en/reference/finance/sage/finance/time_series.html][here]] more details on the =finance.TimeSeries= class.

CSV can also be used to plot, after importing the data:
#+BEGIN_SRC sage
  import csv

  reader = csv.reader(open("exam01.csv"))
  grades = []; list = []
  for line in reader:
	  grades.append(line[2])
  for i in grades:
	  try:
		  f = float(i)
	  except ValueError:
		  pass
	  else:
		  list.append(f)
  finance.TimeSeries(list).plot_histogram(bins = 20)
#+END_SRC

If we have a *discrete graph* and we want to draw lines between the points,
we can use the =line= command. For example, this plots a random walk:
#+BEGIN_SRC sage :session t :tangle ../scratch/random_walk.sage :exports both
  n, l, x, y = 1000, 1, 0, 0; p = [[0,0]]
  for k in range(n):
	  theta = (2*pi*random()).n(digits=5)
	  x, y = x + l * cos(theta), y + l * sin(theta)
	  p.append([x, y])
  g1 = line([p[n], [0, 0]], color='red', thickness=2)
  g1 += line(p, thickness=.4); g1.show(aspect_ratio=1)
#+END_SRC

Which gives [[file:../scratch/random_walk.png][this]].

** Plotting Solutions of Differential Equations
We use the following example: Draw the integral curves of the differential
equation xy' - 2y = x^3.
#+BEGIN_SRC sage :session t :tangle ../scratch/lde_plot.sage :exports both
  x = var('x'); y = function('y')
  DE = x*diff(y(x), x) == 2*y(x) + x^3
  sol = []
  for i in srange(-2, 2, 0.2):
	  sol.append(desolve(DE, [y(x), x], ics=[1,i]))
	  sol.append(desolve(DE, [y(x), x], ics=[-1,i]))
  g = plot(sol, x, -2, 2)
  y = var('y')
  g += plot_vector_field((x, 2*y+x^3), (x, -2, 2), (y, -1, 1))
  g.show(ymin=-1, ymax=1)
#+END_SRC

which gives [[file:../scratch/lde_plot.png][this]].

** Osculating Circles of a Parabola
The centre of curvature \Omega at a point M_t = (x(t), y(t)) has coordinates:
#+BEGIN_SRC latex :results raw :file ltximg/centre.png :exports results
\begin{align*}
  x_\Omega &= x - y^\prime \cdot \dfrac{x^{\prime 2} + y^{\prime 2}}{%
             x^\prime y^{\prime\prime} - x^{\prime\prime} y^\prime} \\
  y_\Omega &= y + x^\prime \cdot \dfrac{x^{\prime 2} + y^{\prime 2}}{%
             x^\prime y^{\prime\prime} - x^{\prime\prime} y^\prime}
\end{align*}
#+END_SRC

[[file:ltximg/centre.png]]

and the radius of curvature at M_t is:
#+BEGIN_SRC latex :results raw :file ltximg/radius.png :exports results
\[
  R = \dfrac{(x^{\prime 2} + y^{\prime 2})^{\frac{3}{2}}}{%
    x^\prime y^{\prime\prime} - x^{\prime\prime} y^\prime}
\]
#+END_SRC

[[file:ltximg/radius.png]]

We have:
#+BEGIN_SRC sage :session t :tangle ../scratch/osculating_parabola.sage :exports both
  # parabola in parametric form
  t = var('t'); p = 2
  x(t) = t; y(t) = t^2 / (2*p); f(t) = [x(t), y(t)]
  df(t) = [x(t).diff(t), y(t).diff(t)]
  d2f(t) = [x(t).diff(t, 2), y(t).diff(t, 2)]

  T(t) = [df(t)[0] / df(t).norm(), df[1](t) / df(t).norm()]
  N(t) = [-df(t)[1] / df(t).norm(), df[0](t) / df(t).norm()]
  R(t) = (df(t).norm())^3 / (df(t)[0]*d2f(t)[1] - df(t)[1] * d2f(t)[0])
  Omega(t) = [f(t)[0] + R(t)*N(t)[0], f(t)[1] + R(t)*N(t)[1]]
  g = parametric_plot(f(t), (t, -8, 8), color='green', thickness=2)
  for u in srange(.4, 4, .2):
	  g += line([f(t=u), Omega(t=u)], color='red', alpha = .5)
	  g += circle(Omega(t=u), R(t=u), color='blue')
  g.show(aspect_ratio=1, xmin=-12, xmax=7, ymin=-3, ymax=12)
#+END_SRC

which gives [[file:../scratch/oscullating_parabola.png][this]].

** 3D Plots
We can use the function =plot3d(f(x,y), (x,a,b), y(c,d,))= and for rendering,
we have either the [[http://jedi.ks.uiuc.edu/~johns/tachyon/][Tachyon 3D Ray Tracer]] with the option ~viewer='tachyon'~
or [[https://threejs.org/][three.js]] with ~viewer='threejs'~. 

*Remark:* Unline =tachyon=, which outputs a static PNG file, =threejs= 
outputs an interactive HTML, which is opened in the browser and can be
manipulated.

Example:
#+BEGIN_SRC sage :session t :tangle ../scratch/3dplot1.sage :exports both
  u, v = var('u, v')
  h = lambda u, v : u^2 + 2*v^2
  g3 = plot3d(h, (u, -1,1), (v, -1,1), aspect_ratio=[1,1,1])
  g3.show(viewer='tachyon')
#+END_SRC

which is [[file:../scratch/plot3d1.png][this]].

*Implicit 3D plots* can also be drawn with the command =implicit_plot3d=.
Let us draw the /Cassini surface/: (a^2 + x^2 + y^2)^2 = 4a^2x^2 + z^4:
#+BEGIN_SRC sage :session t :tangle ../scratch/cassini.sage :exports both
  x, y, z = var('x,y,z'); a = 1
  h = lambda x, y, z : (a^2 + x^2 + y^2)^2 - 4*a^2*x^2-z^4
  cassini = implicit_plot3d(h, (x, -3, 3), (y, -3, 3), (z, -2, 2),
							plot_points=100)
  cassini.show(viewer='threejs')
#+END_SRC

which is [[file:../scratch/cassini.html][this]] (interactive HTML, approx. 9MB, impossible to render correctly on GitHub).

* Differential Equations
** First Order ODE
The general form is F(x, y(x), y'(x)) = 0, so we will have to define
the variable =x= and the function =y=, that depends on =x=:
#+BEGIN_SRC sage :session t
  x = var('x')
  y = function('y')(x)
#+END_SRC

Then, the general syntax is:
#+BEGIN_SRC sage :session t
  desolve(equation, variable, ics=..., ivar=..., show_method=..., contrib_ode=...)
#+END_SRC
where:
- =equation= is the differential equation, written, e.g., as ~diff(y,x) == 2*y + x~;
- =variable= is the /dependent/ variable, i.e. the function (=y= in the case above);
- =ics= is optional and stands for /initial conditions/. For a first order equation,
  this is =[x0, y0]= and for a second-order equation, it is =[x0,y0,x1,y1]= or
  =[x0,y0,y0']=;
- =ivar= is optional and stands for the /independent variable/, i.e. =x= in our
  case above. It must be specified when there are more parameters, e.g.
  ~y' = ay + bx + c~;
- =show_method= is an optional Boolean set to =false= by default. For =true=,
  Sage returns =[solution, method]=, where =method= shows how it was solved and
  it can be: =linear, separable, exact, homogeneous, bernoulli, generalized homogeneous=;
- =contrib_ode= is an optional Boolean set to =false= by default. If =true=,
  it can solve more complicated equations such as Clairaut, Lagrange, Riccati,
  but it generally takes longer.

*** Example: Linear Equation
Take the equation: y' + 3y = e^x.

This is solved as:
#+BEGIN_SRC sage :session t :tangle ../scratch/linear_ode.sage :exports both :results output
  x = var('x'); y = function('y')(x)
  desolve(diff(y,x) + 3*y == exp(x), y, show_method=True)
#+END_SRC

which gives:

#+RESULTS:
: [1/4*(4*_C + e^(4*x))*e^(-3*x), 'linear']

*** Example: Separable Equation
Take the equation yy' = x.

This is solved by:
#+BEGIN_SRC sage :session t :tangle ../scratch/separable_ode.sage :exports both :results output
  x = var('x'); y = function('y')(x)
  desolve(y*diff(y,x) == x, y, show_method=True)
#+END_SRC
which gives:
#+RESULTS:
: [1/2*y(x)^2 == 1/2*x^2 + _C, 'separable']

*** Example: Bernoulli Equation
Example: y' - y = xy^4.
#+BEGIN_SRC sage :session t :tangle ../scratch/bernoulli_ode.sage :exports both :results output
  x = var('x'); y = function('y')(x)
  desolve(diff(y,x)-y == x*y^4, y, show_method=True)
#+END_SRC
which gives:
#+RESULTS:
: [e^x/(-1/3*(3*x - 1)*e^(3*x) + _C)^(1/3), 'bernoulli']

*** Example: Homogeneous Equation
Note that these equations have an implicit solution.

Example: x^2 y' = y^2 + xy + x^2
#+BEGIN_SRC sage :session t :tangle ../scratch/homogeneous_ode.sage :exports both :results output
  x = var('x'); y = function('y')(x)
  desolve(x^2*diff(y,x) == y^2 + x*y + x^2, y, show_method=True)
#+END_SRC
which gives the implicit solution:
#+RESULTS:
: [_C*x == e^(arctan(y(x)/x)), 'homogeneous']

*** Example: Exact Equations
Solve: y' = (cos(y) - 2x)/(y + x*sin(y)).
#+BEGIN_SRC sage :session t :tangle ../scratch/exact_ode.sage :exports both :results output
  x = var('x'); y = function('y')(x)
  desolve(diff(y,x) == (cos(y) - 2*x)/(y + x*sin(y)), y, show_method=True)
#+END_SRC

The implicit solution is:
#+RESULTS:
: [x^2 - x*cos(y(x)) + 1/2*y(x)^2 == _C, 'exact']

*** Example: Riccati Equations
Solve the equation: y' = xy^2 + y/x - 1/x^2.

This time, we have to enable =contrib_ode=.
#+BEGIN_SRC sage :session t :tangle ../scratch/riccati_ode.sage :exports both :results output
  x = var('x'); y = function('y')(x)
  desolve(diff(y,x) == x*y^2 + y/x - 1/x^2, y, contrib_ode=True, show_method=True)
#+END_SRC

The solution is here:
#+RESULTS:
: [[y(x) == -1/2*((_C*(bessel_Y(4, 2*sqrt(-x)) - bessel_Y(2, 2*sqrt(-x))) + bessel_J(4, 2*sqrt(-x)) - bessel_J(2, 2*sqrt(-x)))*x + 3*(_C*bessel_Y(3, 2*sqrt(-x)) + bessel_J(3, 2*sqrt(-x)))*sqrt(-x))/((_C*bessel_Y(3, 2*sqrt(-x)) + bessel_J(3, 2*sqrt(-x)))*sqrt(-x)*x^2)],
:  'riccati']

Note that the result is presented as a list, so we can extract only the
type of equation with =desolve(...)[1]= or only the solution with =desolve(...)[0]=.

*** Improving the Presentation of Solutions
We can rearrange the output to use common factors if possible in the solution.

Take the equation y' + 2y = x^2 - 2x + 3.

Initially, the solution looks like this:
#+BEGIN_SRC sage :session t :tangle ../scratch/linear_ode_notexpanded.sage :exports both :results output
  x = var('x'); y = function('y')(x)
  DE = diff(y,x) + 2*y == x**2 - 2*x + 3
  desolve(DE,y)
#+END_SRC

#+RESULTS:
: 1/4*((2*x^2 - 2*x + 1)*e^(2*x) - 2*(2*x - 1)*e^(2*x) + 4*_C + 6*e^(2*x))*e^(-2*x)

To clear this out, we =expand= the solution:
#+BEGIN_SRC sage :session t :tangle ../scratch/linear_ode_expanded.sage :exports both :results output
  x = var('x'); y = function('y')(x)
  DE = diff(y,x) + 2*y == x**2 - 2*x + 3
  desolve(DE,y).expand()
#+END_SRC

This makes the solution clearer like so:
#+RESULTS:
: 1/2*x^2 + _C*e^(-2*x) - 3/2*x + 9/4

We can add an initial condition, to eliminate the constant:
#+BEGIN_SRC sage :session t :tangle ../scratch/linear_ode_ics.sage :exports both :results output
  x = var('x'); y = function('y')(x)
  DE = diff(y,x) + 2*y == x**2 - 2*x + 3
  desolve(DE,y, ics=[0,1]).expand()
#+END_SRC

And this gives:
#+RESULTS:
: 1/2*x^2 - 3/2*x - 5/4*e^(-2*x) + 9/4

For the cases when the solution is implicit, we can make it explicit, by using =solve=:
#+BEGIN_SRC sage :session t :tangle ../scratch/separable_ode_explicit.sage :exports both :results output
  x = var('x'); y = function('y')(x)
  # assign the solutions, to use them later
  ed = desolve(diff(y,x) * log(y) == y*sin(x), y)
  print('Implicit solution: ' + str(ed))

  # since the solution is implicit, we make it explicit
  print('Explicit solution:')
  solve(ed, y)

  # give a random value to _C
  c = ed.variables()[0]                   # variables = (_C, x)
  print('Explicit solution, with a particular _C:')
  solve(ed,y)[0].substitute(c==5).rhs()

  # plot several solutions (for various _C)
  P = Graphics()                          # initialize an empty canvas
  for k in range(1, 20, 2):
	  P += plot(solve(ed, y)[0].substitute(c == 1 + k/4).rhs(), x, -3, 3)
  P.show()
#+END_SRC

#+RESULTS:
: Implicit solution: 1/2*log(y(x))^2 == _C - cos(x)
: Explicit solution:
: [y(x) == e^(-sqrt(2*_C - 2*cos(x))), y(x) == e^(sqrt(2*_C - 2*cos(x)))]
: Explicit solution, with a particular _C:
: e^(-sqrt(-2*cos(x) + 10))

And the plot is [[file:../scratch/ode_plot.png][here]].

** Second Order DE
Example: y'' + 3y = x^2 - 7x + 31.

#+BEGIN_SRC sage :session t :tangle ../scratch/second_ode_example.sage :exports both :results output
  x = var('x'); y = function('y')(x)
  DE = diff(y,x,2) + 3*y == x^2 - 7*x + 31
  print('Expanded general solution:')
  desolve(DE, y).expand()

  # add initial conditions, e.g. y(0) = 1, y'(0) = 2
  print("Adding initial conditions y(0) = 1, y'(0) = 2:")
  desolve(DE, y, ics=[0,1,2]).expand()
#+END_SRC

This gives:
#+RESULTS:
: Expanded general solution:
: 1/3*x^2 + _K2*cos(sqrt(3)*x) + _K1*sin(sqrt(3)*x) - 7/3*x + 91/9
: Adding initial conditions y(0) = 1, y'(0) = 2:
: 1/3*x^2 + 13/9*sqrt(3)*sin(sqrt(3)*x) - 7/3*x - 82/9*cos(sqrt(3)*x) + 91/9

** PDE: Heat Equation
We will study a general form of the heat equation, [[file:ltximg/heat.png][this one]].
#+BEGIN_SRC latex :results raw :file ltximg/heat.png :exports results
  \[
	\dfrac{\partial^2 z}{\partial x^2}(x, t) = C \cdot %
	\dfrac{\partial z}{\partial t}(x, t)
  \]
#+END_SRC

We will use the conditions t > 0, z(0,t) = 0, z(l, t) = 0, x in [0, l], z(x, 0) = 1.

We will seek non-zero solutions of the form z(x,t) = f(x)g(t), i.e. we use the
method of /separation of variables/.

#+BEGIN_SRC sage :session t :tangle ../scratch/heat_eq.sage :exports both :results output
  # define variables and functions
  x, t = var('x, t')
  f = function('f')(x)
  g = function('g')(t)
  z = f * g

  print('The equation:')
  eq(x, t) = diff(z, x, 2) == diff(z, t); eq(x, t)

  print('Divide by f(x) g(t), assumed not zero')
  eqn = eq/z; eqn(x, t)

  print('Separate equations and introduce a constant k')
  k = var('k')
  eq1(x, t) = eqn(x, t).lhs() == k; eq1
  eq2(x, t) = eqn(x, t).rhs() == k; eq2

  # solve them separately, starting with the second
  g(t) = desolve(eq2(x,t), [g,t]); g(t)
  # print('g(t) = ' + str(g(t)))

  # for the second one, we need an assumption on k
  assume(k > 0);
  f(x) = desolve(eq1, [f,x])
  print('f(x) = ' + str(f(x)))
#+END_SRC

This gives:

#+RESULTS:
: The equation:
: g(t)*diff(f(x), x, x) == f(x)*diff(g(t), t)
: Divide by f(x) g(t), assumed not zero
: diff(f(x), x, x)/f(x) == diff(g(t), t)/g(t)
: Separate equations and introduce a constant k
: (x, t) |--> diff(f(x), x, x)/f(x) == k
: (x, t) |--> diff(g(t), t)/g(t) == k
: _C*e^(k*t)
: f(x) = _K1*e^(sqrt(k)*x) + _K2*e^(-sqrt(k)*x)

** Laplace Transform Applied to DE
Solve the equation y'' - 3y' - 4y = sin(x), using the Laplace
transform, with the initial conditions y(0) = 1, y'(0) = -1.

#+BEGIN_SRC sage :session t :tangle ../scratch/laplace_tr_ode.sage :exports both :results output
  x, s = var('x, s')
  f = function('f')(x)
  f(x) = sin(x);

  print('Laplace transform of sin(x):')
  f.laplace(x,s)

  print('Get the inverse transform:')
  X(s) = 1/(s^2 - 3*s + 4)/(s^2 + 1) + (s-4)/(s^2 - 3*s - 4)
  X(s).inverse_laplace(s, x)

  print('=== ALTERNATIVE ===')
  print('Decompose in partial fractions first')
  X(s).partial_fraction()
  print('Now use the inversion table.')

  print('=== ALTERNATIVE 2 ===')
  print('Use desolve_laplace')
  x = var('x'); y = function('y')(x)
  eq = diff(y,x,x) - 3*diff(y,x) - 4*y - sin(x) == 0
  print('General solution:')
  desolve_laplace(eq, y)
  print('Adding initial conditions [0,1,-1]')
  desolve_laplace(eq, y, ics=[0,1,-1])
#+END_SRC

Which gives:
#+RESULTS:
#+begin_example
Laplace transform of sin(x):
x |--> 1/(s^2 + 1)
Get the inverse transform:
1/42*(sqrt(7)*sin(1/2*sqrt(7)*x) - 7*cos(1/2*sqrt(7)*x))*e^(3/2*x) + 1/6*cos(x) + e^(-x) + 1/6*sin(x)
=== ALTERNATIVE ===
Decompose in partial fractions first
1/6*(s + 1)/(s^2 + 1) - 1/6*(s - 2)/(s^2 - 3*s + 4) + 1/(s + 1)
Now use the inversion table.
=== ALTERNATIVE 2 ===
Use desolve_laplace
General solution:
1/85*(17*y(0) + 17*D[0](y)(0) + 1)*e^(4*x) + 1/10*(8*y(0) - 2*D[0](y)(0) - 1)*e^(-x) + 3/34*cos(x) - 5/34*sin(x)
Adding initial conditions [0,1,-1]
3/34*cos(x) + 1/85*e^(4*x) + 9/10*e^(-x) - 5/34*sin(x)
#+end_example

** Systems of LDE
Take the system: y'(x) = A*y(x) and y(0) = C, given [[file:ltximg/system_lde.png][this]].
#+BEGIN_SRC latex :file ltximg/system_lde.png :results raw :exports results
  \[
	A = \begin{pmatrix}
	  2 & -2 & 0 \\
	  -2 & 0 & 2 \\
	  0 & 2 & 2
	\end{pmatrix}, \quad %
	y(x) = \begin{pmatrix}
	  y_1(x) \\
	  y_2(x) \\
	  y_3(x)
	\end{pmatrix}, \quad %
	c = \begin{pmatrix}
	  2 \\ 1 \\ -2
	\end{pmatrix}
  \]
#+END_SRC

Sage:
#+BEGIN_SRC sage :session t :exports both :tangle ../scratch/system_lde.sage :results output
  x = var('x')
  y1 = function('y1')(x)
  y2 = function('y2')(x)
  y3 = function('y3')(x)
  y = vector([y1, y2, y3])
  A = matrix([[2,-2,0], [2,0,2], [0,2,2]])
  system = [diff(y[i], x) - (A * y)[i] for i in range(3)]

  desolve_system(system, [y1,y2,y3], ics=[0,2,1,-2])
#+END_SRC

which gives:
#+RESULTS:
: [y1(x) == e^(2*x) + 1, y2(x) == 1, y3(x) == -e^(2*x) - 1]
